/*
	UIZE JAVASCRIPT FRAMEWORK 2012-01-10

	http://www.uize.com/reference/Uize.Test.Uize.Date.html
	Available under MIT License or GNU General Public License -- http://www.uize.com/license.html
*/
Uize.module({name:'Uize.Test.Uize.Date',required:'Uize.Class',builder:function(){function _a(_b){return+_b}function _c(_b){return _b+''}function _d(_b){return Uize.Date.toIso8601(_b)}function _e(_f,_g,_h,_i,_j,_k,_l){var _b=new Date(+_f+(_f<100&&400),(+_g||1)-1,+_h||1,+_i||0,+_j||0,+_k||0,+_l||0);_f<100&&_b.setFullYear(_f);return _b;}var _m=new Date,_n=24*60*60*1000,_o=_e(2001,9,11,8,46,40),_p=new Date(NaN),_q=_e(9,1,1),_r=_e(99,1,1),_s=_e(999,1,1),_t=_e(9999,1,1),_u=_e(2001,1,1),_v=_e(2001,12,1),_w=_e(2001,1,1),_x=_e(2001,1,31),_y=_e(2001,1,1,23,59,59,999),_z=_e(2001,1,2,0,0,0,0),_A=_e(2001,6,15),_B=_e(2001,12,31,23,59,59,999),_C=_e(2002,1,1,0,0,0,0),_D={minValue:_z,maxValue:_B},_E={minValue:_z},_F={minValue:_B},_G={minValue:_z,maxValue:_z},_H={};var _I=Uize.Class.subclass();_I.registerProperties({_J:'value'});function _K(_L,_M){return{title:_L,test:function(){var _N=new Date,_O=Uize.Date.resolve.apply(Uize.Date,_M);return this.expectInstanceOf(Date,_O)&&_N-_O<10;}};}function _P(_L,_Q,_M,_R){return{title:_L,
test:function(){var _O=Uize.Date[_Q].apply(Uize.Date,_M);return(this.expectInstanceOf(Date,_O)&&_O.getFullYear()==_R.getFullYear()&&_O.getMonth()==_R.getMonth()&&_O.getDate()==_R.getDate());}};}function _S(_L,_M,_R){return _P(_L,'resolve',_M,_R);}function _T(_L,_U,_V,_W,_X){return{title:_L,test:function(){var _N=new Date;return this.expect(_W,Uize.Date.isRecent((_X||Uize.returnX)(new Date(+_N+_U*_n)),_V,_N));}}}function _Y(_L,_Z,_X){return{title:_L,test:function(){var _0={minValue:_z,maxValue:_z};_0[_Z]=_X(_z);return(!Uize.Date.inRange(_y,_0)&&Uize.Date.inRange(_z,_0)&& !Uize.Date.inRange(_A,_0));}}}function _1(_L,_M,_2){return{title:_L,test:function(){var _0=Uize.Date.getRangeAround.apply(Uize.Date,_M);return!(_0.minValue-_2.minValue||_0.maxValue-_2.maxValue);}};}function _3(_4,_5,_6,_7){var _2={minValue:_5,maxValue:_7};return{title:'Tests for getting a '+_4+' sized range around dates that fall at the beginning, in the middle, and at the end of a '+_4,test:[_1(
'Test getting a '+_4+' sized range around a date that is at the beginning of a '+_4,[_5,_4],_2),_1('Test getting a '+_4+' sized range around a date that is within a '+_4,[_6,_4],_2),_1('Test getting a '+_4+' sized range around a date that is at the end of a '+_4,[_7,_4],_2)]};}function _8(_J,_9){return{title:'Test that date to get range around is defaulted to now when its value is '+_9,test:function(){var _ba=Uize.Date.getRangeAround(new Date,'month'),_bb=Uize.Date.getRangeAround(_J,'month');return!(_ba.minValue-_bb.minValue||_ba.maxValue-_bb.maxValue);}};}return Uize.Test.declare({title:'Test for Uize.Date Module',test:[Uize.Test.requiredModulesTest('Uize.Date'),Uize.Test.staticMethodsTest([['Uize.Date.convert',[['Test that converting 1 year to months produces the result 12',[1,'years','months'],12],['Test that converting 1 month to weeks produces the result 4.348121428571429',[1,'months','weeks'],4.348121428571429],['Test that converting 1 week to days produces the result 7',[1,'weeks','days'],7],
['Test that converting 1 day to hours produces the result 24',[1,'days','hours'],24],['Test that converting 1 hour to minutes produces the result 60',[1,'hours','minutes'],60],['Test that converting 1 minute to seconds produces the result 60',[1,'minutes','seconds'],60],['Test that converting 1 second to milliseconds produces the result 1000',[1,'seconds','ms'],1000],['Test that converting 1 month to years produces the result 1/12',[1,'months','years'],1/12],['Test that converting 1 day to weeks produces the result 1/7',[1,'days','weeks'],1/7],['Test that converting 1 hour to days produces the result 1/24',[1,'hours','days'],1/24],['Test that converting 1 minute to hours produces the result 1/60',[1,'minutes','hours'],1/60],['Test that converting 1 second to minutes produces the result 1/60',[1,'seconds','minutes'],1/60],['Test that converting 1 millisecond to seconds produces the result 1/1000',[1,'ms','seconds'],1/1000],['Test that the value to be converted can be a string type',['2','hours','seconds'],7200
],['Test that the values for all the parameters can be Uize class instances',[new _I({value:'2'}),new _I({value:'hours'}),new _I({value:'seconds'})],7200]]],['Uize.Date.isLeapYear',[['Test that a year that is not perfectly divisible by 4 is not considered a leap year',2001,false],['Test that a year that is perfectly divisible by 4, but is not perfectly divisible by 100, is considered a leap year',2004,true],['Test that a year that is perfectly divisible by 4, but that is perfectly divisible by 100 and not perfectly divisible by 400, is not considered a leap year',1900,false],['Test that a year that is perfectly divisible by 4, but is perfectly divisible by 100, but is also perfectly divisible by 400, is considered a leap year',2000,true]]],['Uize.Date.getDaysInMonth',[['Test that January has 31 days in a non-leap year',[0,2001],31],['Test that February has 28 days in a non-leap year',[1,2001],28],['Test that March has 31 days in a non-leap year',[2,2001],31],
['Test that April has 30 days in a non-leap year',[3,2001],30],['Test that May has 31 days in a non-leap year',[4,2001],31],['Test that June has 30 days in a non-leap year',[5,2001],30],['Test that July has 31 days in a non-leap year',[6,2001],31],['Test that August has 31 days in a non-leap year',[7,2001],31],['Test that September has 30 days in a non-leap year',[8,2001],30],['Test that October has 31 days in a non-leap year',[9,2001],31],['Test that November has 30 days in a non-leap year',[10,2001],30],['Test that December has 31 days in a non-leap year',[11,2001],31],['Test that January has 31 days in a leap year',[0,2000],31],['Test that February has 29 days in a leap year',[1,2000],29],['Test that March has 31 days in a leap year',[2,2000],31],['Test that April has 30 days in a leap year',[3,2000],30],['Test that May has 31 days in a leap year',[4,2000],31],['Test that June has 30 days in a leap year',[5,2000],30],['Test that July has 31 days in a leap year',[6,2000],31],
['Test that August has 31 days in a leap year',[7,2000],31],['Test that September has 30 days in a leap year',[8,2000],30],['Test that October has 31 days in a leap year',[9,2000],31],['Test that November has 30 days in a leap year',[10,2000],30],['Test that December has 31 days in a leap year',[11,2000],31]]],['Uize.Date.fromIso8601',[_P('Test that an ISO8601 date string formatted in the typical YYYY-MM-DD manner is decoded correctly','fromIso8601',['2001-09-11'],_o),['Test that a date string that is not formatted as ISO8601 produces the result undefined','THIS IS NOT A VALID ISO8601 DATE STRING',undefined],_P('Test that an ISO8601 formatted date string is allowed to have three digits for the year','fromIso8601',['999-01-02'],_e(999,1,2)),_P('Test that an ISO8601 formatted date string with a year less than 100 is not considered in the 20th century when more than two digits are specified for year','fromIso8601',['099-01-02'],_e(99,1,2)),_P(
'Test that an ISO8601 formatted date string is allowed to have two digits for the year','fromIso8601',['99-01-02'],_e(1999,1,2)),['Test that a date string that has only one year digit is not considered a valid ISO8601 formatted date','1-01-02',undefined],_P('Test that an ISO8601 formatted date string is allowed to have more than four digits for the year','fromIso8601',['12345-01-02'],_e(12345,1,2)),_P('Test that an ISO8601 formatted date string is allowed to have only one digit for the month','fromIso8601',['2000-1-02'],_e(2000,1,2)),_P('Test that an ISO8601 formatted date string is allowed to have only one digit for the day','fromIso8601',['2000-01-2'],_e(2000,1,2)),['Test that a date string that has more than two month digits is not considered a valid ISO8601 formatted date','2000-001-02',undefined],['Test that a date string that has more than two day digits is not considered a valid ISO8601 formatted date','2000-01-002',undefined],_P(
'Test that an ISO8601 date string can be surrounded by extraneous text and still parsed correctly','fromIso8601',['AN ISO8601 DATE ----> 2001-09-11 <---- AN ISO8601 DATE'],_o),{title:'Test that the returned Date object instance has its hours, minutes, seconds, and milliseconds all set to 0',test:function(){var _O=Uize.Date.fromIso8601('2001-09-11');return(!_O.getHours()&& !_O.getMinutes()&& !_O.getSeconds()&& !_O.getMilliseconds());}}]],['Uize.Date.resolve',[['Test that the specified default date is returned when undefined is specified for the dateSTRorOBJ parameter',[undefined,_m],_m],['Test that the specified default date is returned when null is specified for the dateSTRorOBJ parameter',[null,_m],_m],['Test that the specified default date is returned when an empty string is specified for the dateSTRorOBJ parameter',['',_m],_m],_K('Test that specifying undefined as the default date results in the default being defaulted to a date initialized to now',['',undefined]),
['Test that specifying null as the default date results in null being used as the default date',[undefined,null],null],['Test that the specified default date is returned when an empty string is specified for the dateSTRorOBJ parameter',['',_m],_m],{title:'Test that the specified default date is not used when a valid date to resolve is specified',test:function(){return Uize.Date.resolve('Thu Apr 01 2010 18:45:01 GMT-0700 (Pacific Daylight Time)',_m)!=_m;}},_S('Test that the date to resolve can be an ISO8601 formatted date',[_o.getFullYear()+'-'+(_o.getMonth()+1)+'-'+_o.getDate()],_o),_S('Test that when an integer is specified for the date to resolve, a Date object instance is created with its time in milliseconds initialized to the specified number',[+_o],_o),_S('Test that when the number 0 is specified for the date to resolve, a Date object instance is created with its time in milliseconds initialized to 0 (rather than defaulting to now)',[0],new Date(0)),_S(
'Test that an instance of the Date object resolves to a new Date object instance, set to the same time',[_o],_o),_S('Test that a correctly formatted valid date string resolves to a Date object instance initialized to the correct time',[_o+''],_o),{title:'Test that a badly formatted date string resolves to a Date object instance initialized to the time NaN',test:function(){var _O=Uize.Date.resolve('THIS IS NOT A VALID DATE STRING');return this.expectInstanceOf(Date,_O)&&this.expectSameAs(NaN,+_O);}},_K('Test that calling with no parameters produces a date object initialized to now',[])]],['Uize.Date.toIso8601',[['Test that date to encode can be specified as a Date object instance',_o,'2001-09-11'],['Test that date to encode can be specified as a string',_o+'','2001-09-11'],['Test that date to encode can be specified as a string in ISO8601 format','2001-09-11','2001-09-11'],['Test that date to encode can be specified as a millisecond integers number',[+_o],'2001-09-11'],
['Test that leading zeros are added to year, month, and date, when necessary',new Date('Thu Feb 01 0111 00:00:00 GMT-0800 (Pacific Standard Time)'),'0111-02-01'],{title:'Test that now is the default when date to encode is not specfied',test:function(){return Uize.Date.toIso8601()==Uize.Date.toIso8601(new Date())}},['Test that an invalid date is formatted in ISO8601 as ????-??-??',NaN,'????-??-??']]],['Uize.Date.inRange',[['Test that a date that occurs before the start of a date range is not considered in that range',[_y,_D],false],['Test that a date that occurs at the start of a date range is considered in that range',[_z,_D],true],['Test that a date that occurs in the middle of a date range is considered in that range',[_A,_D],true],['Test that a date that occurs at the end of a date range is considered in that range',[_B,_D],true],['Test that a date that occurs after the end of a date range is not considered in that range',[_C,_D],false],['Test that the date to test can be specified as a string',[_z+'',_G],
true],['Test that the date to test can be specified as a string in ISO8601 format',['2001-01-02',_G],true],['Test that the date to test can be specified as a millisecond integers number',[+_z,_G],true],['Test that start of a date range is defaulted to -Infinity when its value is undefined',[-Infinity,{maxValue:_B}],true],['Test that start of a date range is defaulted to -Infinity when its value is null',[-Infinity,{minValue:null,maxValue:_B}],true],['Test that start of a date range is defaulted to -Infinity when its value is an empty string',[-Infinity,{minValue:'',maxValue:_B}],true],['Test that, even when a date range has no minValue, a date that occurs before the end of that range is considered in that range',[_A,{maxValue:_B}],true],['Test that, even when a date range has no minValue, a date that occurs at the end of that range is considered in that range',[_B,{maxValue:_B}],true],
['Test that, even when a date range has no minValue, a date that occurs after the end of that range is not considered in that range',[_C,{maxValue:_B}],false],['Test that end of a date range is defaulted to Infinity when its value is undefined',[Infinity,{minValue:_z}],true],['Test that end of a date range is defaulted to Infinity when its value is null',[Infinity,{minValue:_z,maxValue:null}],true],['Test that end of a date range is defaulted to Infinity when its value is an empty string',[Infinity,{minValue:_z,maxValue:''}],true],['Test that, even when a date range has no maxValue, a date that occurs before the start of that range is not considered in that range',[_y,{minValue:_z}],false],['Test that, even when a date range has no maxValue, a date that occurs at the start of that range is considered in that range',[_z,{minValue:_z}],true],['Test that, even when a date range has no maxValue, a date that occurs after the start of that range is considered in that range',[_A,{minValue:_z}],true],
['Test that -Infinity falls into the unbounded date range (ie. all of time)',[-Infinity,_H],true],['Test that Infinity falls into the unbounded date range (ie. all of time)',[Infinity,_H],true],['Test that an invalid date doesn\'t fall anywhere in an unbounded date range (ie. all of time)',[new Date(NaN),_H],false],_Y('Test that minValue of date range can be specified as a string','minValue',_c),_Y('Test that minValue of date range can be specified as a string in ISO8601 format','minValue',_d),_Y('Test that minValue of date range can be specified as a millisecond integers number','minValue',_a),_Y('Test that maxValue of date range can be specified as a string','maxValue',_c),_Y('Test that maxValue of date range can be specified as a string in ISO8601 format','maxValue',_d),_Y('Test that maxValue of date range can be specified as a millisecond integers number','maxValue',_a),{title:'Test that date to test is defaulted to now when its value is undefined',
test:function(){return Uize.Date.inRange(undefined,{minValue:new Date,maxValue:new Date})}},{title:'Test that date to test is defaulted to now when its value is null',test:function(){return Uize.Date.inRange(null,{minValue:new Date,maxValue:new Date})}},{title:'Test that date to test is defaulted to now when its value is an empty string',test:function(){return Uize.Date.inRange('',{minValue:new Date,maxValue:new Date})}}]],['Uize.Date.isRecent',[_T('Test that now is considered to be in the zero day recency window',0,0,true),_T('Test that yesterday is not considered to be in the zero day recency window',-.9,0,false),_T('Test that tomorrow is considered to be in the zero day recency window',.9,0,true),_T('Test that two days from now is considered to be in the zero day recency window',1.9,0,true),_T('Test that now is considered to be in the one day recency window',0,1,true),_T('Test that yesterday is considered to be in the one day recency window',-.9,1,true),_T(
'Test that two days ago is not considered to be in the one day recency window',-1.9,1,false),_T('Test that tomorrow is considered to be in the one day recency window',.9,1,true),_T('Test that now is not considered to be in the negative one day recency window',0,-1,false),_T('Test that yesterday is not considered to be in the negative one day recency window',-.9,-1,false),_T('Test that tomorrow is not considered to be in the negative one day recency window',.9,-1,false),_T('Test that two days from now is considered to be in the negative one day recency window',1.9,-1,true),_T('Test that the date to test for recency can be specified as a string',1,1,true,_c),_T('Test that the date to test for recency can be specified as a string in ISO8601 format',1,1,true,_d),_T('Test that the date to test for recency can be specified as a millisecond integers number',1,1,true,_a)]],['Uize.Date.getRangeAround',[_3('millennium',_e(2000,1,1,0,0,0,0),_e(2500,1,1,0,0,0,0),_e(2999,12,31,23,59,59,999)),_3('century',
_e(2000,1,1,0,0,0,0),_e(2050,1,1,0,0,0,0),_e(2099,12,31,23,59,59,999)),_3('decade',_e(2000,1,1,0,0,0,0),_e(2005,1,1,0,0,0,0),_e(2009,12,31,23,59,59,999)),_3('year',_e(2000,1,1,0,0,0,0),_e(2000,6,1,0,0,0,0),_e(2000,12,31,23,59,59,999)),_3('quarter',_e(2000,1,1,0,0,0,0),_e(2000,2,1,0,0,0,0),_e(2000,3,31,23,59,59,999)),_3('month',_e(2000,1,1,0,0,0,0),_e(2000,1,15,0,0,0,0),_e(2000,1,31,23,59,59,999)),_3('week',_e(2000,1,2,0,0,0,0),_e(2000,1,5,0,0,0,0),_e(2000,1,8,23,59,59,999)),_3('day',_e(2000,1,1,0,0,0,0),_e(2000,1,1,12,0,0,0),_e(2000,1,1,23,59,59,999)),_3('am/pm',_e(2000,1,1,0,0,0,0),_e(2000,1,1,6,0,0,0),_e(2000,1,1,11,59,59,999)),_3('hour',_e(2000,1,1,0,0,0,0),_e(2000,1,1,0,30,0,0),_e(2000,1,1,0,59,59,999)),_3('minute',_e(2000,1,1,0,0,0,0),_e(2000,1,1,0,0,30,0),_e(2000,1,1,0,0,59,999)),_3('second',_e(2000,1,1,0,0,0,0),_e(2000,1,1,0,0,0,500),_e(2000,1,1,0,0,0,999)),_3('millisecond',_e(2000,1,1,0,0,0,0),_e(2000,1,1,0,0,0,0),_e(2000,1,1,0,0,0,0)),_1(
'Test that the date to get range around can be specified as a string',[_z+'','millisecond'],_G),_1('Test that the date to get range around can be specified as a string in ISO8601 format',['2001-01-02','millisecond'],_G),_1('Test that the date to get range around can be specified as a string',[+_z,'millisecond'],_G),_1('Test that range size is defaulted to a month when its value is undefined',[_e(2000,1,15),undefined],{minValue:_e(2000,1,1),maxValue:_e(2000,1,31,23,59,59,999)}),_1('Test that range size is defaulted to a month when its value is undefined',[_e(2000,1,15),null],{minValue:_e(2000,1,1),maxValue:_e(2000,1,31,23,59,59,999)}),_1('Test that range size is defaulted to a month when its value is undefined',[_e(2000,1,15),''],{minValue:_e(2000,1,1),maxValue:_e(2000,1,31,23,59,59,999)}),_8(undefined,'undefined'),_8(null,'null'),_8('','an empty string')]],['Uize.Date.equal',[['Test that a date is equal to itself down to the precision of a second',[_o,_o,'second'],true],
['Test that a date is equal to itself down to the precision of a minute',[_o,_o,'minute'],true],['Test that a date is equal to itself down to the precision of an hour',[_o,_o,'hour'],true],['Test that a date is equal to itself down to the precision of am/pm',[_o,_o,'am/pm'],true],['Test that a date is equal to itself down to the precision of a day',[_o,_o,'day'],true],['Test that a date is equal to itself down to the precision of a week',[_o,_o,'week'],true],['Test that a date is equal to itself down to the precision of a month',[_o,_o,'month'],true],['Test that a date is equal to itself down to the precision of a quarter',[_o,_o,'quarter'],true],['Test that a date is equal to itself down to the precision of a year',[_o,_o,'year'],true],['Test that a date is equal to itself down to the precision of a decade',[_o,_o,'decade'],true],['Test that a date is equal to itself down to the precision of a century',[_o,_o,'century'],true],['Test that a date is equal to itself down to the precision of a millennium',
[_o,_o,'millennium'],true],['Test that two different dates are considered equal to the precision of a second',['2009/09/10 18:19:25','2009/09/10 18:19:25','second'],true],['Test that two different dates are considered equal to the precision of a minute',['2009/09/10 18:19:25','2009/09/10 18:19:26','minute'],true],['Test that two different dates are considered equal to the precision of an hour',['2009/09/10 18:19:25','2009/09/10 18:20:26','hour'],true],['Test that two different dates are considered equal to the precision of am/pm',['2009/09/10 18:19:25','2009/09/10 19:20:26','am/pm'],true],['Test that two different dates are considered equal to the precision of a day',['2009/09/10 18:19:25','2009/09/10 01:20:26','day'],true],['Test that two different dates are considered equal to the precision of a week',['2009/09/10 18:19:25','2009/09/11 01:20:26','week'],true],['Test that two different dates are considered equal to the precision of a month',['2009/09/10 18:19:25','2009/09/30 01:20:26','month'],true],
['Test that two different dates are considered equal to the precision of a quarter',['2009/09/10 18:19:25','2009/08/11 01:20:26','quarter'],true],['Test that two different dates are considered equal to the precision of a year',['2009/09/10 18:19:25','2009/12/11 01:20:26','year'],true],['Test that two different dates are considered equal to the precision of a decade',['2009/09/10 18:19:25','2008/12/11 01:20:26','decade'],true],['Test that two different dates are considered equal to the precision of a century',['2009/09/10 18:19:25','2050/12/11 01:20:26','century'],true],['Test that two different dates are considered equal to the precision of a millennium',['2009/09/10 18:19:25','2500/12/11 01:20:26','millennium'],true],['Test that two different dates are considered unequal, at the precision of a second',['2009/09/10 18:19:25','2009/09/10 18:19:26','second'],false],['Test that two different dates are considered unequal, at the precision of a minute',['2009/09/10 18:19:25','2009/09/10 18:20:25','minute'],false],
['Test that two different dates are considered unequal, at the precision of an hour',['2009/09/10 18:19:25','2009/09/10 19:19:25','hour'],false],['Test that two different dates are considered unequal, at the precision of am/pm',['2009/09/10 18:19:25','2009/09/10 01:19:25','am/pm'],false],['Test that two different dates are considered unequal, at the precision of a day',['2009/09/10 18:19:25','2009/09/11 18:19:25','day'],false],['Test that two different dates are considered unequal, at the precision of a week',['2009/09/10 18:19:25','2009/09/30 18:19:25','week'],false],['Test that two different dates are considered unequal, at the precision of a month',['2009/09/10 18:19:25','2009/08/10 18:19:25','month'],false],['Test that two different dates are considered unequal, at the precision of a quarter',['2009/09/10 18:19:25','2009/12/10 18:19:25','quarter'],false],['Test that two different dates are considered unequal, at the precision of a year',['2009/09/10 18:19:25','2008/09/10 18:19:25','year'],false],
['Test that two different dates are considered unequal, at the precision of a decade',['2009/09/10 18:19:25','2050/09/10 18:19:25','decade'],false],['Test that two different dates are considered unequal, at the precision of a century',['2009/09/10 18:19:25','2500/09/10 18:19:25','century'],false],['Test that two different dates are considered unequal, at the precision of a millennium',['2009/09/10 18:19:25','1999/09/10 18:19:25','millennium'],false],['Test that calling with no parameters produces the result true (because now is the default for both dates)',[],true],{title:'Test that day is the default unit of precision, when not specified explicitly',test:function(){return(Uize.Date.equal('2009/09/10 18:19:25','2009/09/10 01:02:03')&& !Uize.Date.equal('2009/09/10 18:19:25','2009/09/11 18:19:25'));}},['Test that dates to compare can be specified as Date object instances',[new Date('2009/09/10 18:19:25'),new Date('2009/09/11 18:19:25'),'month'],true],
['Test that dates to compare can be specified as millisecond integers',[+new Date('2009/09/10 18:19:25'),+new Date('2009/09/11 18:19:25'),'month'],true],['Test that dates to compare can be specified in ISO8601 format',['2009-09-10','2009-09-11','month'],true]]]])]});}});